=============================================================================
List of generated methods in project: main

THIS TEXT DESCRIPTION IS GENERATED BY THE TOOL. DO NOT MODIFY IT.
=============================================================================

Module "PTC"       (component Init_GPIO_VAR0)
   - PTC_Init -This method initializes registers of the GPIO module according to the Peripheral Initialization settings. Call 
                this method in user code to initialize the module. By default, the method is called by PE automatically; see 
                "Call Init method" property of the component for more details.

Module "USB0"      (component Init_USB_OTG_VAR0)
   - USB0_Init -This method initializes registers of the USB_OTG module according to the Peripheral Initialization settings. 
                Call this method in user code to initialize the module. By default, the method is called by PE automatically; 
                see "Call Init method" property of the component for more details.

Module "COREUART"  (component AsynchroSerial)
   - COREUART_Enable -Enables the component - it starts the send and receive functions. Events may be generated 
                ("DisableEvent"/"EnableEvent").
   - COREUART_RecvChar -If any data is received, this method returns one character, otherwise it returns an error code (it does 
                not wait for data). This method is enabled only if the receiver property is enabled.  [Note:] Because the 
                preferred method to handle error and break exception in the interrupt mode is to use events <OnError> and 
                <OnBreak> the return value ERR_RXEMPTY has higher priority than other error codes. As a consequence the 
                information about an exception in interrupt mode is returned only if there is a valid character ready to be 
                read.
   - COREUART_SendChar -Sends one character to the channel. If the component is temporarily disabled (Disable method) SendChar 
                method only stores data into an output buffer. In case of a zero output buffer size, only one character can be 
                stored. Enabling the component (Enable method) starts the transmission of the stored data. This method is 
                available only if the transmitter property is enabled.
   - COREUART_RecvBlock -If any data is received, this method returns the block of the data and its length (and incidental 
                error), otherwise it returns an error code (it does not wait for data).  This method is available only if 
                non-zero length of the input buffer is defined and the receiver property is enabled.  If less than requested 
                number of characters is received only the available data is copied from the receive buffer to the user 
                specified destination. The value ERR_EXEMPTY is returned and the value of variable pointed by the Rcv parameter 
                is set to the number of received characters.
   - COREUART_SendBlock -Sends a block of characters to the channel.  This method is available only if non-zero length of the 
                output buffer is defined and the transmitter property is enabled.
   - COREUART_ClearRxBuf -Clears the receive buffer.  This method is available only if non-zero length of the input buffer is 
                defined and the receiver property is enabled.
   - COREUART_ClearTxBuf -Clears the transmit buffer.  This method is available only if non-zero length of the output buffer is 
                defined and the receiver property is enabled.
   - COREUART_GetCharsInRxBuf -Returns the number of characters in the input buffer. This method is available only if the 
                receiver property is enabled.
   - COREUART_GetCharsInTxBuf -Returns the number of characters in the output buffer. This method is available only if the 
                transmitter property is enabled.

Module "UsbMidiTx" (component RingBufferUInt8)
   - UsbMidiTx_Put -Puts a new element into the buffer
   - UsbMidiTx_Get -Removes an element from the buffer
   - UsbMidiTx_NofElements -Returns the actual number of elements in the buffer.
   - UsbMidiTx_NofFreeElements -Returns the actual number of free elements/space in the buffer.
   - UsbMidiTx_Init -Initializes the data structure

Module "UsbMidiRx" (component RingBufferUInt8)
   - UsbMidiRx_Put -Puts a new element into the buffer
   - UsbMidiRx_Get -Removes an element from the buffer
   - UsbMidiRx_NofElements -Returns the actual number of elements in the buffer.
   - UsbMidiRx_NofFreeElements -Returns the actual number of free elements/space in the buffer.
   - UsbMidiRx_Init -Initializes the data structure

Module "WAIT1"     (component Wait)
   - WAIT1_Wait10Cycles -Wait for 10 CPU cycles.
   - WAIT1_Wait100Cycles -Wait for 100 CPU cycles.
   - WAIT1_WaitCycles -Wait for a specified number of CPU cycles (16bit data type).
   - WAIT1_WaitLongCycles -Wait for a specified number of CPU cycles (32bit data type).
   - WAIT1_Waitms -Wait for a specified time in milliseconds.
   - WAIT1_Waitus -Wait for a specified time in microseconds.
   - WAIT1_Waitns -Wait for a specified time in nano seconds.
   - WAIT1_WaitOSms -If an RTOS is enabled, this routine will use a non-blocking wait method. Otherwise it will do a 
                busy/blocking wait.

Module "PTE"       (component Init_GPIO_VAR0)
   - PTE_Init -This method initializes registers of the GPIO module according to the Peripheral Initialization settings. Call 
                this method in user code to initialize the module. By default, the method is called by PE automatically; see 
                "Call Init method" property of the component for more details.

Module "LED1"      (component LED)
   - LED1_Init -Performs the LED driver initialization.
   - LED1_Deinit -Deinitializes the driver
   - LED1_On -This turns the LED on.
   - LED1_Off -This turns the LED off.
   - LED1_Neg -This negates/toggles the LED
   - LED1_Get -This returns logical 1 in case the LED is on, 0 otherwise.
   - LED1_Put -Turns the LED on or off.
   - LED1_SetRatio16 -Method to specify the duty cycle. If using a PWM pin, this means the duty cycle is set. For On/off pins, 
                values smaller 0x7FFF means off, while values greater means on.

Module "PTA"       (component Init_GPIO_VAR0)
   - PTA_Init -This method initializes registers of the GPIO module according to the Peripheral Initialization settings. Call 
                this method in user code to initialize the module. By default, the method is called by PE automatically; see 
                "Call Init method" property of the component for more details.

Module "PTB"       (component Init_GPIO_VAR0)
   - PTB_Init -This method initializes registers of the GPIO module according to the Peripheral Initialization settings. Call 
                this method in user code to initialize the module. By default, the method is called by PE automatically; see 
                "Call Init method" property of the component for more details.

Module "PTD"       (component Init_GPIO_VAR0)
   - PTD_Init -This method initializes registers of the GPIO module according to the Peripheral Initialization settings. Call 
                this method in user code to initialize the module. By default, the method is called by PE automatically; see 
                "Call Init method" property of the component for more details.

Module "TMOUT1"    (component Timeout)
   - TMOUT1_GetCounter -Initializes a new timeout counter and returns the handle to it. At the end, use LeaveCounter() to free 
                up the resource.
   - TMOUT1_LeaveCounter -To be called to return the counter. Note that a counter always should be returned so it can be reused.
   - TMOUT1_Value -Return the current value of the counter (in ticks)
   - TMOUT1_SetCounter -Sets the counter to a new value and returns the value just prior to the call.
   - TMOUT1_CounterExpired -Returns true if the timeout counter has been expired
   - TMOUT1_AddTick -Method to be called from a periodic timer or interrupt. It will decrement all current counters by one down 
                to zero.
   - TMOUT1_Init -Initialization of the driver

Module "CS1"       (component CriticalSection)
   - CS1_CriticalVariable -Defines a variable if necessary. This is a macro.
   - CS1_EnterCritical -Enters a critical section
   - CS1_ExitCritical -Exits a critical section

Module "TI1"       (component TimerInt)

Module "TU1"       (component TimerUnit_LDD)
   - TU1_Init -Initializes the device. Allocates memory for the device data structure, allocates interrupt vectors and sets 
                interrupt priority, sets pin routing, sets timing, etc. If the property <"Enable in init. code"> is set to 
                "yes" value then the device is also enabled (see the description of the <Enable> method). In this case the 
                <Enable> method is not necessary and needn't to be generated. This method can be called only once. Before the 
                second call of Init the <Deinit> must be called first.

Module "DMAT1"     (component DMATransfer_LDD)
   - DMAT1_Init -Initializes the DMATransfer component. Allocates memory for the device data structure.  This method can be 
                called only once. Before the second call of Init() the Deinit() must be called first.
   - DMAT1_Deinit -Deinitializes the DMATransfer component.
   - DMAT1_AllocateChannel -The method allocates DMA channel for the DMA transfer. This method must be called before DMA 
                channel is initialized. Otherwise ERR_NOTAVAIL error code is returned after call of DMA_LDD channel methods.
   - DMAT1_EnableChannel -The method initializes and/or enables the DMA channel allocated for the DMA transfer defined by the 
                transfer descriptor input parameter DescriptorPtr. First call of this method on given DMA channel initializes 
                it and enables HW requests if Peripheral device or Always enabled trigger source is selected in transfer 
                descriptor Trigger source type item. This method can be also used together with Disable method to temporary 
                switch On/Off the DMA channel HW requests. In such case DMA channel registers are not reinitialized again. New 
                initialization of DMA channel can be done via SetChannelDescriptorUpdate method which reinitializes whole 
                channel with new transfer descriptor.

Module "DMA1"      (component DMA_LDD)
   - DMA1_Init -Initializes the device according to design-time configuration properties. Allocates memory for the device data 
                structure.   If the <Enable in init. code> is set to "yes" then the device is also enabled (see the description 
                of the Enable method).  This method can be called only once. Before the second call of Init the Deinit method 
                must be called first.
   - DMA1_Deinit -Deinitializes the associated peripheral(s) and frees the component internal data structure.
   - DMA1_AllocateChannel -The method allocates DMA channel for the DMA transfer defined by the transfer descriptor input 
                parameter DescriptorPtr. This method must be called before DMA channel is initialized. Otherwise ERR_NOTAVAIL 
                error code is returned after call of DMA_LDD channel methods.
   - DMA1_EnableChannel -The method initializes and/or enables the DMA channel allocated for the DMA transfer defined by the 
                transfer descriptor input parameter DescriptorPtr. First call of this method on given DMA channel initializes 
                it and enables HW requests if Peripheral device or Always enabled trigger source is selected in transfer 
                descriptor Trigger source type item. This method can be also used together with Disable method to temporary 
                switch On/Off the DMA channel HW requests. In such case DMA channel registers are not reinitialized again. New 
                initialization of DMA channel can be done via SetChannelDescriptorUpdate method which reinitializes whole 
                channel with new transfer descriptor. After calling of EnableChannel method channel status is set to 
                LDD_DMA_IDLE.

Module "MIDIUART3" (component AsynchroSerial)
   - MIDIUART3_RecvChar -If any data is received, this method returns one character, otherwise it returns an error code (it 
                does not wait for data). This method is enabled only if the receiver property is enabled.  [Note:] Because the 
                preferred method to handle error and break exception in the interrupt mode is to use events <OnError> and 
                <OnBreak> the return value ERR_RXEMPTY has higher priority than other error codes. As a consequence the 
                information about an exception in interrupt mode is returned only if there is a valid character ready to be 
                read.
   - MIDIUART3_SendChar -Sends one character to the channel. If the component is temporarily disabled (Disable method) SendChar 
                method only stores data into an output buffer. In case of a zero output buffer size, only one character can be 
                stored. Enabling the component (Enable method) starts the transmission of the stored data. This method is 
                available only if the transmitter property is enabled.
   - MIDIUART3_RecvBlock -If any data is received, this method returns the block of the data and its length (and incidental 
                error), otherwise it returns an error code (it does not wait for data).  This method is available only if 
                non-zero length of the input buffer is defined and the receiver property is enabled.  If less than requested 
                number of characters is received only the available data is copied from the receive buffer to the user 
                specified destination. The value ERR_EXEMPTY is returned and the value of variable pointed by the Rcv parameter 
                is set to the number of received characters.
   - MIDIUART3_SendBlock -Sends a block of characters to the channel.  This method is available only if non-zero length of the 
                output buffer is defined and the transmitter property is enabled.
   - MIDIUART3_ClearRxBuf -Clears the receive buffer.  This method is available only if non-zero length of the input buffer is 
                defined and the receiver property is enabled.
   - MIDIUART3_ClearTxBuf -Clears the transmit buffer.  This method is available only if non-zero length of the output buffer 
                is defined and the receiver property is enabled.
   - MIDIUART3_GetCharsInRxBuf -Returns the number of characters in the input buffer. This method is available only if the 
                receiver property is enabled.
   - MIDIUART3_GetCharsInTxBuf -Returns the number of characters in the output buffer. This method is available only if the 
                transmitter property is enabled.

Module "MIDIUART4" (component AsynchroSerial)
   - MIDIUART4_RecvChar -If any data is received, this method returns one character, otherwise it returns an error code (it 
                does not wait for data). This method is enabled only if the receiver property is enabled.  [Note:] Because the 
                preferred method to handle error and break exception in the interrupt mode is to use events <OnError> and 
                <OnBreak> the return value ERR_RXEMPTY has higher priority than other error codes. As a consequence the 
                information about an exception in interrupt mode is returned only if there is a valid character ready to be 
                read.
   - MIDIUART4_SendChar -Sends one character to the channel. If the component is temporarily disabled (Disable method) SendChar 
                method only stores data into an output buffer. In case of a zero output buffer size, only one character can be 
                stored. Enabling the component (Enable method) starts the transmission of the stored data. This method is 
                available only if the transmitter property is enabled.
   - MIDIUART4_RecvBlock -If any data is received, this method returns the block of the data and its length (and incidental 
                error), otherwise it returns an error code (it does not wait for data).  This method is available only if 
                non-zero length of the input buffer is defined and the receiver property is enabled.  If less than requested 
                number of characters is received only the available data is copied from the receive buffer to the user 
                specified destination. The value ERR_EXEMPTY is returned and the value of variable pointed by the Rcv parameter 
                is set to the number of received characters.
   - MIDIUART4_SendBlock -Sends a block of characters to the channel.  This method is available only if non-zero length of the 
                output buffer is defined and the transmitter property is enabled.
   - MIDIUART4_ClearRxBuf -Clears the receive buffer.  This method is available only if non-zero length of the input buffer is 
                defined and the receiver property is enabled.
   - MIDIUART4_ClearTxBuf -Clears the transmit buffer.  This method is available only if non-zero length of the output buffer 
                is defined and the receiver property is enabled.
   - MIDIUART4_GetCharsInRxBuf -Returns the number of characters in the input buffer. This method is available only if the 
                receiver property is enabled.
   - MIDIUART4_GetCharsInTxBuf -Returns the number of characters in the output buffer. This method is available only if the 
                transmitter property is enabled.

Module "Cpu"       (component MKL26Z128FM4)

===================================================================================
