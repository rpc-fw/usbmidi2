/* ###################################################################
**     THIS COMPONENT MODULE IS GENERATED BY THE TOOL. DO NOT MODIFY IT.
**     Filename    : DMA1.h
**     Project     : usbmidi2_4x4_master
**     Processor   : MKL26Z64VFM4
**     Component   : DMA_LDD
**     Version     : Component 01.065, Driver 01.07, CPU db: 3.00.000
**     Compiler    : GNU C Compiler
**     Date/Time   : 2015-08-10, 17:25, # CodeGen: 0
**     Abstract    :
**          This embedded component implements initialization
**          and runtime handling of an on-chip DMA controller.
**     Settings    :
**          Component name                                 : DMA1
**          Device                                         : DMA
**          Channel arbitration type                       : Round robin
**          DMA channels                                   : 1
**            Settings of DMA channel                      : DMA_Channel2
**              Channel                                    : DMA_Channel2
**              Channel arbitration type                   : Round robin
**              Interrupt service                          : Enabled
**                Transfer complete interrupt              : INT_DMA2
**                Transfer complete interrupt priority     : medium priority
**          Initialization                                 : 
**            Enabled in init. code                        : yes
**            Auto initialization                          : yes
**          CPU clock/configuration selection              : 
**            Clock configuration 0                        : This component enabled
**            Clock configuration 1                        : This component disabled
**            Clock configuration 2                        : This component disabled
**            Clock configuration 3                        : This component disabled
**            Clock configuration 4                        : This component disabled
**            Clock configuration 5                        : This component disabled
**            Clock configuration 6                        : This component disabled
**            Clock configuration 7                        : This component disabled
**     Contents    :
**         Init            - LDD_TDeviceData* DMA1_Init(LDD_TUserData *UserDataPtr);
**         Deinit          - void DMA1_Deinit(LDD_TDeviceData *DeviceDataPtr);
**         AllocateChannel - LDD_TError DMA1_AllocateChannel(LDD_TDeviceData *DeviceDataPtr,...
**         EnableChannel   - LDD_TError DMA1_EnableChannel(LDD_TDeviceData *DeviceDataPtr,...
**
**     Copyright : 1997 - 2014 Freescale Semiconductor, Inc. 
**     All Rights Reserved.
**     
**     Redistribution and use in source and binary forms, with or without modification,
**     are permitted provided that the following conditions are met:
**     
**     o Redistributions of source code must retain the above copyright notice, this list
**       of conditions and the following disclaimer.
**     
**     o Redistributions in binary form must reproduce the above copyright notice, this
**       list of conditions and the following disclaimer in the documentation and/or
**       other materials provided with the distribution.
**     
**     o Neither the name of Freescale Semiconductor, Inc. nor the names of its
**       contributors may be used to endorse or promote products derived from this
**       software without specific prior written permission.
**     
**     THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
**     ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
**     WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
**     DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
**     ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
**     (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
**     LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
**     ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
**     (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
**     SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
**     
**     http: www.freescale.com
**     mail: support@freescale.com
** ###################################################################*/
/*!
** @file DMA1.h
** @version 01.07
** @brief
**          This embedded component implements initialization
**          and runtime handling of an on-chip DMA controller.
*/         
/*!
**  @addtogroup DMA1_module DMA1 module documentation
**  @{
*/         

#ifndef __DMA1_H
#define __DMA1_H

/* MODULE DMA1. */

/* Include shared modules, which are used for whole project */
#include "PE_Types.h"
#include "PE_Error.h"
#include "PE_Const.h"
#include "IO_Map.h"
/* Include inherited beans */
#include "Cpu.h"
#include "DMA_PDD.h"
#include "DMAMUX_PDD.h"

#include "Cpu.h"


/*! Peripheral base address of a device allocated by the component. This constant can be used directly in PDD macros. */
#define DMA1_PRPH_BASE_ADDRESS  0x40008000U
  
/*! Device data structure pointer used when auto initialization property is enabled. This constant can be passed as a first parameter to all component's methods. */
#define DMA1_DeviceData  ((LDD_TDeviceData *)PE_LDD_GetDeviceStructure(PE_LDD_COMPONENT_DMA1_ID))

/* Methods configuration constants - generated for all enabled component's methods */
#define DMA1_Init_METHOD_ENABLED       /*!< Init method of the component DMA1 is enabled (generated) */
#define DMA1_Deinit_METHOD_ENABLED     /*!< Deinit method of the component DMA1 is enabled (generated) */
#define DMA1_AllocateChannel_METHOD_ENABLED /*!< AllocateChannel method of the component DMA1 is enabled (generated) */
#define DMA1_EnableChannel_METHOD_ENABLED /*!< EnableChannel method of the component DMA1 is enabled (generated) */

/* Number of DMA channels supported by hardware */
#define DMA1_DMA_CHANNELS_NUMBER 0x04U
/* DMA doesn't support multiple multiplexers */
#define DMA1_DMAMUX0_CHANNELS_NUMBER 0x00U
#define DMA1_DMAMUX1_CHANNELS_NUMBER 0x00U
/* Number of configured channels (i.e. all channels set in DMA1 component) */
#define DMA1_CONFIGURED_CHANNELS_NUMBER 0x01U
/* Number of available channels (i.e. all configured channels excluding permanently allocated channels) */
#define DMA1_AVAILABLE_CHANNELS_NUMBER 0x00U
/* No DMAMUX0 channels configured */
#define DMA1_CONFIGURED_DMAMUX0_CHANNELS_NUMBER 0x00U
/* No DMAMUX0 channels available */
#define DMA1_AVAILABLE_DMAMUX0_CHANNELS_NUMBER 0x00U
/* No DMAMUX1 channels configured */
#define DMA1_CONFIGURED_DMAMUX1_CHANNELS_NUMBER 0x00U
/* No DMAMUX1 channels available */
#define DMA1_AVAILABLE_DMAMUX1_CHANNELS_NUMBER 0x00U
/* Number of permanently allocated channels */
#define DMA1_ALLOCATED_CHANNELS_NUMBER 0x01U
/* No DMAMUX0 permanently allocated channels */
#define DMA1_ALLOCATED_DMAMUX0_CHANNELS_NUMBER 0x00U
/* No DMAMUX1 permanently allocated channels */
#define DMA1_ALLOCATED_DMAMUX1_CHANNELS_NUMBER 0x00U
/* Number of available channels capable of periodic triggering (excluding permanently allocated channels) */
#define DMA1_PERIODIC_TRIGGER_CHANNELS_NUMBER 0x00U
/* No DMAMUX0 channels capable of periodic triggering available. */
#define DMA1_PERIODIC_TRIGGER_DMAMUX0_CHANNELS_NUMBER 0U
/* No DMAMUX1 channels capable of periodic triggering available. */
#define DMA1_PERIODIC_TRIGGER_DMAMUX1_CHANNELS_NUMBER 0U
/* No channels without periodic triggering capability available. */
#define DMA1_SIMPLE_CHANNELS_NUMBER 0U
/* No DMAMUX0 channels without periodic triggering capability available. */
#define DMA1_SIMPLE_DMAMUX0_CHANNELS_NUMBER 0U
/* No DMAMUX1 channels without periodic triggering capability available. */
#define DMA1_SIMPLE_DMAMUX1_CHANNELS_NUMBER 0U
/* Channel number constants */
#define DMA1_CHANNEL_0 0x00U
#define DMA1_CHANNEL_1 0x01U
#define DMA1_CHANNEL_2 0x02U
#define DMA1_CHANNEL_3 0x03U
/*  This constant contains mask of all supported events */
#define DMA1_AVAILABLE_EVENTS_MASK (LDD_DMA_ON_COMPLETE | LDD_DMA_ON_ERROR)
/* Maximum number of bytes to be transferred in each service request of the channel */
#define DMA1_MAX_BYTE_COUNT 0x00FFFFFFU
typedef struct {
  LDD_DMA_TChannelNumber ChannelNumber; /* ChannelNumber */
  LDD_DMA_TTransferDescriptor *DescriptorPtr; /* Pointer to the channel's transfer descriptor */
  bool Interrupts;                     /* True, if the DMA channel has enabled interrupts */
  bool Initialized;                    /* True, if the DMA channel has been initialized */
  bool Enabled;                        /* True, if the DMA channel is enabled */
} DMA1_TDescriptorRecord;              /* Transfer descriptor record type. */

typedef DMA1_TDescriptorRecord *DMA1_TDescriptorRecordPtr; /* Pointer to transfer descriptor record. */

typedef struct {
  DMA1_TDescriptorRecord DescriptorRecord[DMA1_CONFIGURED_CHANNELS_NUMBER]; /* Transfer descriptor records table, one record per one channel. */
  DMA1_TDescriptorRecord *ChannelRecord[DMA1_DMA_CHANNELS_NUMBER]; /* Channel record table for each channel. */
  LDD_TUserData *UserDataPtr;          /* User device data structure */
  LDD_TEventMask EventMask[DMA1_DMA_CHANNELS_NUMBER]; /* Event mask of enabled events */
} DMA1_TDeviceData;                    /* Device data structure */

/* DMA Transfer descriptor structure variables external declarations */
extern DMA1_TDeviceData *DMA1_DeviceDataPtr;


/*
** ===================================================================
**     Method      :  DMA1_Init (component DMA_LDD)
*/
/*!
**     @brief
**         Initializes the device according to design-time
**         configuration properties. Allocates memory for the device
**         data structure. 
**         If the <Enable in init. code> is set to "yes" then the
**         device is also enabled (see the description of the Enable
**         method).
**         This method can be called only once. Before the second call
**         of Init the Deinit method must be called first.
**     @param
**         UserDataPtr     - Pointer to the user or
**                           RTOS specific data. This pointer will be
**                           passed as an event or callback parameter.
**     @return
**                         - Pointer to the device data structure. 
*/
/* ===================================================================*/
LDD_TDeviceData* DMA1_Init(LDD_TUserData *UserDataPtr);

/*
** ===================================================================
**     Method      :  DMA1_Deinit (component DMA_LDD)
*/
/*!
**     @brief
**         Deinitializes the associated peripheral(s) and frees the
**         component internal data structure.
**     @param
**         DeviceDataPtr   - Device data structure
**                           pointer returned by <Init> method.
*/
/* ===================================================================*/
void DMA1_Deinit(LDD_TDeviceData *DeviceDataPtr);

/*
** ===================================================================
**     Method      :  DMA1_AllocateChannel (component DMA_LDD)
*/
/*!
**     @brief
**         The method allocates DMA channel for the DMA transfer
**         defined by the transfer descriptor input parameter
**         DescriptorPtr. This method must be called before DMA channel
**         is initialized. Otherwise ERR_NOTAVAIL error code is
**         returned after call of DMA_LDD channel methods.
**     @param
**         DeviceDataPtr   - Device data structure
**                           pointer returned by <Init> method.
**     @param
**         DescriptorPtr   - Pointer to a DMA
**                           transfer descriptor structure.
**     @return
**                         - Error code, possible codes:
**                           - ERR_OK - OK.
**                           - ERR_SPEED - This device does not work in
**                           the active clock configuration.
**                           - ERR_DISABLED - Component or device is
**                           disabled.
**                           - ERR_NOTAVAIL - There is not any possible
**                           channel with desired features to be
**                           allocated.
*/
/* ===================================================================*/
LDD_TError DMA1_AllocateChannel(LDD_TDeviceData *DeviceDataPtr, LDD_DMA_TTransferDescriptor *DescriptorPtr);

/*
** ===================================================================
**     Method      :  DMA1_EnableChannel (component DMA_LDD)
*/
/*!
**     @brief
**         The method initializes and/or enables the DMA channel
**         allocated for the DMA transfer defined by the transfer
**         descriptor input parameter DescriptorPtr. First call of this
**         method on given DMA channel initializes it and enables HW
**         requests if Peripheral device or Always enabled trigger
**         source is selected in transfer descriptor Trigger source
**         type item. This method can be also used together with
**         Disable method to temporary switch On/Off the DMA channel HW
**         requests. In such case DMA channel registers are not
**         reinitialized again. New initialization of DMA channel can
**         be done via SetChannelDescriptorUpdate method which
**         reinitializes whole channel with new transfer descriptor.
**         After calling of EnableChannel method channel status is set
**         to LDD_DMA_IDLE.
**     @param
**         DeviceDataPtr   - Device data structure
**                           pointer returned by <Init> method.
**     @param
**         DescriptorPtr   - Pointer to a DMA
**                           transfer descriptor structure.
**     @return
**                         - Error code, possible codes:
**                           - ERR_OK - OK.
**                           - ERR_SPEED - This device does not work in
**                           the active clock configuration.
**                           - ERR_DISABLED - Component or device is
**                           disabled.
**                           - ERR_NOTAVAIL - There is not any DMA
**                           channel allocated for the selected transfer
**                           descriptor.
**                           - ERR_PARAM_DATA - Transfer descriptor data
**                           are inconsistent.
*/
/* ===================================================================*/
LDD_TError DMA1_EnableChannel(LDD_TDeviceData *DeviceDataPtr, LDD_DMA_TTransferDescriptor *DescriptorPtr);

/*
** ===================================================================
**     Method      :  DMA1_SetClockConfiguration (component DMA_LDD)
**
**     Description :
**         This method changes the clock configuration. During a clock 
**         configuration change the component changes it's setting 
**         immediately upon a request.
**         This method is internal. It is used by Processor Expert only.
** ===================================================================
*/
void DMA1_SetClockConfiguration(LDD_TDeviceData *DeviceDataPtr, LDD_TClockConfiguration ClockConfiguration);

/* {Bareboard RTOS Adapter} ISR function prototype */
PE_ISR(DMA1_Channel2Interrupt);


/* END DMA1. */

#endif
/* ifndef __DMA1_H */
/*!
** @}
*/
/*
** ###################################################################
**
**     This file was created by Processor Expert 10.4 [05.11]
**     for the Freescale Kinetis series of microcontrollers.
**
** ###################################################################
*/
