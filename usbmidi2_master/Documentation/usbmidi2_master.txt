=============================================================================
List of generated methods in project: main

THIS TEXT DESCRIPTION IS GENERATED BY THE TOOL. DO NOT MODIFY IT.
=============================================================================

Module "PTB"       (component Init_GPIO_VAR0)
   - PTB_Init -This method initializes registers of the GPIO module according to the Peripheral Initialization settings. Call 
                this method in user code to initialize the module. By default, the method is called by PE automatically; see 
                "Call Init method" property of the component for more details.

Module "PTC"       (component Init_GPIO_VAR0)
   - PTC_Init -This method initializes registers of the GPIO module according to the Peripheral Initialization settings. Call 
                this method in user code to initialize the module. By default, the method is called by PE automatically; see 
                "Call Init method" property of the component for more details.

Module "MIDIUART1" (component AsynchroSerial)
   - MIDIUART1_RecvChar -If any data is received, this method returns one character, otherwise it returns an error code (it 
                does not wait for data). This method is enabled only if the receiver property is enabled.  [Note:] Because the 
                preferred method to handle error and break exception in the interrupt mode is to use events <OnError> and 
                <OnBreak> the return value ERR_RXEMPTY has higher priority than other error codes. As a consequence the 
                information about an exception in interrupt mode is returned only if there is a valid character ready to be 
                read.
   - MIDIUART1_SendChar -Sends one character to the channel. If the component is temporarily disabled (Disable method) SendChar 
                method only stores data into an output buffer. In case of a zero output buffer size, only one character can be 
                stored. Enabling the component (Enable method) starts the transmission of the stored data. This method is 
                available only if the transmitter property is enabled.
   - MIDIUART1_RecvBlock -If any data is received, this method returns the block of the data and its length (and incidental 
                error), otherwise it returns an error code (it does not wait for data).  This method is available only if 
                non-zero length of the input buffer is defined and the receiver property is enabled.  If less than requested 
                number of characters is received only the available data is copied from the receive buffer to the user 
                specified destination. The value ERR_EXEMPTY is returned and the value of variable pointed by the Rcv parameter 
                is set to the number of received characters.
   - MIDIUART1_SendBlock -Sends a block of characters to the channel.  This method is available only if non-zero length of the 
                output buffer is defined and the transmitter property is enabled.
   - MIDIUART1_ClearRxBuf -Clears the receive buffer.  This method is available only if non-zero length of the input buffer is 
                defined and the receiver property is enabled.
   - MIDIUART1_ClearTxBuf -Clears the transmit buffer.  This method is available only if non-zero length of the output buffer 
                is defined and the receiver property is enabled.
   - MIDIUART1_GetCharsInRxBuf -Returns the number of characters in the input buffer. This method is available only if the 
                receiver property is enabled.
   - MIDIUART1_GetCharsInTxBuf -Returns the number of characters in the output buffer. This method is available only if the 
                transmitter property is enabled.

Module "COREUART"  (component AsynchroSerial)
   - COREUART_RecvChar -If any data is received, this method returns one character, otherwise it returns an error code (it does 
                not wait for data). This method is enabled only if the receiver property is enabled.  [Note:] Because the 
                preferred method to handle error and break exception in the interrupt mode is to use events <OnError> and 
                <OnBreak> the return value ERR_RXEMPTY has higher priority than other error codes. As a consequence the 
                information about an exception in interrupt mode is returned only if there is a valid character ready to be 
                read.
   - COREUART_SendChar -Sends one character to the channel. If the component is temporarily disabled (Disable method) SendChar 
                method only stores data into an output buffer. In case of a zero output buffer size, only one character can be 
                stored. Enabling the component (Enable method) starts the transmission of the stored data. This method is 
                available only if the transmitter property is enabled.
   - COREUART_GetCharsInRxBuf -Returns the number of characters in the input buffer. This method is available only if the 
                receiver property is enabled.
   - COREUART_GetCharsInTxBuf -Returns the number of characters in the output buffer. This method is available only if the 
                transmitter property is enabled.

Module "PTE"       (component Init_GPIO_VAR0)
   - PTE_Init -This method initializes registers of the GPIO module according to the Peripheral Initialization settings. Call 
                this method in user code to initialize the module. By default, the method is called by PE automatically; see 
                "Call Init method" property of the component for more details.

Module "BBA1"      (component Bareboard)

Module "WAIT1"     (component Wait)
   - WAIT1_Wait10Cycles -Wait for approximately 10 CPU cycles.
   - WAIT1_Wait100Cycles -Wait for 100 CPU cycles.
   - WAIT1_WaitCycles -Wait for 100 CPU cycles.
   - WAIT1_Waitms -Wait for a specified time in milliseconds.
   - WAIT1_Waitus -Wait for a specified time in microseconds.
   - WAIT1_Waitns -Wait for a specified time in nano seconds.
   - WAIT1_WaitOSms -If an RTOS is enabled, this routine will use a non-blocking wait method. Otherwise it will do a 
                busy/blocking wait.

Module "UsbMidiTx" (component RingBufferUInt8)
   - UsbMidiTx_Put -Puts a new element into the buffer
   - UsbMidiTx_Get -Removes an element from the buffer
   - UsbMidiTx_NofElements -Returns the actual number of elements in the buffer.
   - UsbMidiTx_NofFreeElements -Returns the actual number of free elements/space in the buffer.
   - UsbMidiTx_Init -Initializes the data structure

Module "UsbMidiRx" (component RingBufferUInt8)
   - UsbMidiRx_Put -Puts a new element into the buffer
   - UsbMidiRx_Get -Removes an element from the buffer
   - UsbMidiRx_NofElements -Returns the actual number of elements in the buffer.
   - UsbMidiRx_NofFreeElements -Returns the actual number of free elements/space in the buffer.
   - UsbMidiRx_Init -Initializes the data structure

Module "USB0"      (component Init_USB_OTG_VAR0)
   - USB0_Init -This method initializes registers of the USB_OTG module according to the Peripheral Initialization settings. 
                Call this method in user code to initialize the module. By default, the method is called by PE automatically; 
                see "Call Init method" property of the component for more details.

Module "Cpu"       (component MKL26Z128FM4)

===================================================================================
