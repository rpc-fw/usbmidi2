=============================================================================
List of generated methods in project: main

THIS TEXT DESCRIPTION IS GENERATED BY THE TOOL. DO NOT MODIFY IT.
=============================================================================

Module "PTC"       (component Init_GPIO_VAR0)
   - PTC_Init -This method initializes registers of the GPIO module according to the Peripheral Initialization settings. Call 
                this method in user code to initialize the module. By default, the method is called by PE automatically; see 
                "Call Init method" property of the component for more details.

Module "MIDIUART1" (component AsynchroSerial)
   - MIDIUART1_RecvChar -If any data is received, this method returns one character, otherwise it returns an error code (it 
                does not wait for data). This method is enabled only if the receiver property is enabled.  [Note:] Because the 
                preferred method to handle error and break exception in the interrupt mode is to use events <OnError> and 
                <OnBreak> the return value ERR_RXEMPTY has higher priority than other error codes. As a consequence the 
                information about an exception in interrupt mode is returned only if there is a valid character ready to be 
                read.
   - MIDIUART1_SendChar -Sends one character to the channel. If the component is temporarily disabled (Disable method) SendChar 
                method only stores data into an output buffer. In case of a zero output buffer size, only one character can be 
                stored. Enabling the component (Enable method) starts the transmission of the stored data. This method is 
                available only if the transmitter property is enabled.
   - MIDIUART1_ClearRxBuf -Clears the receive buffer.  This method is available only if non-zero length of the input buffer is 
                defined and the receiver property is enabled.
   - MIDIUART1_ClearTxBuf -Clears the transmit buffer.  This method is available only if non-zero length of the output buffer 
                is defined and the receiver property is enabled.
   - MIDIUART1_GetCharsInRxBuf -Returns the number of characters in the input buffer. This method is available only if the 
                receiver property is enabled.

Module "COREUART"  (component AsynchroSerial)
   - COREUART_Enable -Enables the component - it starts the send and receive functions. Events may be generated 
                ("DisableEvent"/"EnableEvent").
   - COREUART_Disable -Disables the component - it stops the send and receive functions. No events will be generated.
   - COREUART_RecvChar -If any data is received, this method returns one character, otherwise it returns an error code (it does 
                not wait for data). This method is enabled only if the receiver property is enabled.  [Note:] Because the 
                preferred method to handle error and break exception in the interrupt mode is to use events <OnError> and 
                <OnBreak> the return value ERR_RXEMPTY has higher priority than other error codes. As a consequence the 
                information about an exception in interrupt mode is returned only if there is a valid character ready to be 
                read.
   - COREUART_SendChar -Sends one character to the channel. If the component is temporarily disabled (Disable method) SendChar 
                method only stores data into an output buffer. In case of a zero output buffer size, only one character can be 
                stored. Enabling the component (Enable method) starts the transmission of the stored data. This method is 
                available only if the transmitter property is enabled.
   - COREUART_ClearRxBuf -Clears the receive buffer.  This method is available only if non-zero length of the input buffer is 
                defined and the receiver property is enabled.
   - COREUART_ClearTxBuf -Clears the transmit buffer.  This method is available only if non-zero length of the output buffer is 
                defined and the receiver property is enabled.

Module "PTE"       (component Init_GPIO_VAR0)
   - PTE_Init -This method initializes registers of the GPIO module according to the Peripheral Initialization settings. Call 
                this method in user code to initialize the module. By default, the method is called by PE automatically; see 
                "Call Init method" property of the component for more details.

Module "BBA1"      (component Bareboard)

Module "LED1"      (component LED)
   - LED1_Init -Performs the LED driver initialization.
   - LED1_On -This turns the LED on.
   - LED1_Off -This turns the LED off.

Module "WAIT1"     (component Wait)
   - WAIT1_Wait10Cycles -Wait for 10 CPU cycles.
   - WAIT1_Wait100Cycles -Wait for 100 CPU cycles.
   - WAIT1_WaitCycles -Wait for a specified number of CPU cycles (16bit data type).
   - WAIT1_WaitLongCycles -Wait for a specified number of CPU cycles (32bit data type).
   - WAIT1_Waitms -Wait for a specified time in milliseconds.

Module "PTD"       (component Init_GPIO_VAR0)
   - PTD_Init -This method initializes registers of the GPIO module according to the Peripheral Initialization settings. Call 
                this method in user code to initialize the module. By default, the method is called by PE automatically; see 
                "Call Init method" property of the component for more details.

Module "SlaveReset" (component BitIO_LDD)
   - SlaveReset_Init -Initializes the device. Allocates memory for the device data structure, allocates interrupt vectors and 
                sets interrupt priority, sets pin routing, sets timing, etc. If the "Enable in init. code" is set to "yes" 
                value then the device is also enabled(see the description of the Enable() method). In this case the Enable() 
                method is not necessary and needn't to be generated.
   - SlaveReset_SetDir -Sets a pin direction (available only if the direction = _[input/output]_).
   - SlaveReset_SetInput -Sets a pin direction to input (available only if the direction = _[input/output]_).
   - SlaveReset_ClrVal -Clears (set to zero) the output value. It is equivalent to the [PutVal(FALSE)]. This method is 
                available only if the direction = _[output]_ or _[input/output]_.
   - SlaveReset_SetVal -Sets (to one) the output value. It is equivalent to the [PutVal(TRUE)]. This method is available only 
                if the direction = _[output]_ or _[input/output]_.

Module "IFsh1"     (component IntFLASH)
   - IFsh1_DisableEvent -This method disables all the events except <OnSaveBuffer>, <OnRestoreBuffer> and <OnEraseError>. The 
                method is available only if any event is enabled.
   - IFsh1_EnableEvent -This method enables all the events except <OnSaveBuffer>, <OnRestoreBuffer> and <OnEraseError>. The 
                method is available only if any event is enabled.
   - IFsh1_SetBlockFlash -Writes data to FLASH. The operation of this method depends on the "Write method" property and state 
                of the flash. Please see more details on general info page of the help.

Module "KIN1"      (component KinetisTools)
   - KIN1_SoftwareReset -Performs a reset of the device

Module "UTIL1"     (component Utility)
   - UTIL1_IsLeapYear -Returns true if a given year is a leap year

Module "I2S0"      (component Init_I2S_VAR1)
   - I2S0_Init -This method initializes registers of the I2S module according to the Peripheral Initialization settings. Call 
                this method in user code to initialize the module. By default, the method is called by PE automatically; see 
                "Call Init method" property of the component for more details.

Module "Cpu"       (component MKL26Z128FM4)

===================================================================================
